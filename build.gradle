buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath "org.spongepowered:mixingradle:${mixingradle_version}"
        classpath 'org.parchmentmc:librarian:1.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "$mcVersion-$modVersion"
group = 'de.dertoaster.crosszoar'
archivesBaseName = "$modName"

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

configurations {
    includedDependencies
    atDependencies
    buildDependencies

    implementation.extendsFrom(includedDependencies)
    implementation.extendsFrom(atDependencies)
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    //mappings channel: 'official', version: '1.18.1'
    mappings channel: 'parchment', version: '2021.12.19-1.18.1'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            taskName 'runClient Crosszoar 1.18.1'
            //arg "-mixin.config=crosszoar.mixins.json"
            
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                crosszoar {
                    source sourceSets.main
                }
            }
        }

        server {
            taskName 'runServer Crosszoar 1.18.1'
            //arg "-mixin.config=crosszoar.mixins.json"

            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                crosszoar {
                    source sourceSets.main
                }
            }
        }

        data {
            taskName 'runData Crosszoar 1.18.1'
            //arg "-mixin.config=crosszoar.mixins.json"

            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'crosszoar', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                crosszoar {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    //maven { url = 'https://jitpack.io' }
    maven { url 'https://www.cursemaven.com' }

    flatDir {
       dirs 'dependencies'
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.1-39.0.0'

    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    
    //implementation 'com.github.DerToaster98:Crossbowverhaul:1.2.0'
    implementation fg.deobf('curse.maven:Crossbowverhaul-555300:3602275')
    
    //Bezoar, until it is on curseforge
    implementation name: 'Bezoar-Alpha-1.0'
}

mixin {
    add sourceSets.main, "crosszoar.refmap.json"
}

// Generate a fixed tsrg file after generating the default tsrg file
createMcpToSrg {
    outputs.upToDateWhen {false}
    doLast {
        fixFG5TsrgForMixinAP(output.get().asFile, file("${buildDir}/fixMcpToSrg/output.tsrg"))
    }
}

// Tell mixin to use the fixed TSRG file
mixin {
    reobfSrgFile = file("${buildDir}/fixMcpToSrg/output.tsrg")
}

// Function that actually fixes the TSRG file
static def fixFG5TsrgForMixinAP(File inFile, File outFile) {
    // Make directory if needed
    outFile.parentFile.mkdirs()

    try (Scanner scanner = new Scanner(inFile); PrintWriter out = new PrintWriter(outFile)) {
        boolean firstLine = true
        while (scanner.hasNextLine()) {
            String next = scanner.nextLine()

            // Skip first 'tsrg left right' header line
            if (firstLine) {
                firstLine = false
                continue
            }

            // Skip 'static' indicators
            if (next.trim() == "static") {
                continue
            }

            // Export line otherwise
            out.println(next)
        }
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    classifier = 'universal'
    manifest {
        attributes([
            "Specification-Title": "$modName",
            "Specification-Vendor": "DerToaster",
            "Specification-Version": "$modVersion",
            "Implementation-Title": "$modName",
            "Implementation-Version": "$modVersion",
            "Implementation-Vendor" :"DerToaster",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "crosszoar.mixins.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')
